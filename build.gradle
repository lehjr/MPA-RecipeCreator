buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'

// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

def buildnumber = System.getenv("BUILD_NUMBER")
def travisbuildnumber = (System.getenv("TRAVIS_BUILD_NUMBER") ?: -000).toInteger() + 00

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.


version = "${mod_version}.${buildnumber ?: travisbuildnumber}"
group = group_id // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${title}-${minecraft_version}"

def mparecipecreator_version = (System.getenv("MPALIB_VERSION") ?: "${version}")

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

repositories {
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    flatDir {
        dirs 'libs'
    }
}

minecraft {
    mappings channel: "snapshot", version: "${project.mcp_version}".toString()
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/mpalib_at.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run').canonicalPath

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            ideaModule project.group + ".main"

            mods {
                mparecipecreator {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run').canonicalPath

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            ideaModule project.group + ".main"

            mods {
                mparecipecreator {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft([
            group  : "${project.forgegroup}",
            name   : "forge",
            version: "${project.minecraft_version}-${project.forge_version}"
    ])

    // compile against the JEI API but do not include it at runtime
    // currently not actually using any JEI code, just using it as a matter of convienience for testing.
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")

    // at runtime, use the full JEI jar
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")

    compile fileTree(dir: 'libs', include: ['*.jar'])
}

jar {
    manifest {
        attributes(["Specification-Title": project.name,
                    "Specification-Vendor": "lehjr",
                    "Specification-Version": "1", // We are version 1 of the modlauncher specification
                    "Implementation-Title": project.name,
                    "Implementation-Version": "${version}",
                    "Implementation-Vendor" :"lehjr",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ],)
    }
}

// Process resources on build
processResources {
    // This will ensure that this task is redone when the versions change.
    inputs.property 'version', project.version

    // Replace stuff in mods.toml, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        // Replace version
        expand 'version':project.version

        filter { String line ->
            line.replace "@@title@@", "${title}"
        }

        filter { String line ->
            line.replace "@@mod_id@@", "${mod_id}"
        }
    }

    // Copy everything else except the mods.toml
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}

task devJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}

artifacts {
    archives devJar
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
